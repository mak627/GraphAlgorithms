#include <list>
class Graph{
		int n;
	public:
		void BFS(int start);	
};

void Graph::BFS(int start){
	int *Parents =  new int[n];
	bool *visited = new bool[n];
	list<int> queue;
	
	for(int i = 0; i < n; i++) 
        Parents[i] = -1;
	for(int i = 0; i < n; i++) 
        visited[i] = false;
	
	visited[start] = true;	
	queue.push_back(start);
	
	while(!queue.empty()){
		int node = queue.front();
		queue.pop_front();
		
		for (i = edgelist(start); i != edgelist(end); ++i) //pseudocode 
        { 
            if (!visited[*i]) 
            { 
                visited[*i] = true;
				Parents[*i] = node;
                queue.push_back(*i); 
            } 
        }		
	}
}